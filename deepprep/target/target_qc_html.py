#!/usr/bin/env python3
"""
Target QC HTML Report Generator

This script reads TARGET_targets_auto.json files from each subject directory 
generated by the Target step, and creates an HTML QC report containing all subjects.

According to image requirements:
1. Parcellation display - show only what is used
2. Target display - show based on target type (cortical/subcortical, Surface/Volume space)
3. Left/right side detection - show bilateral or unilateral

Usage:
    python target_qc_html.py --input_dir /path/to/target/results --output_dir /path/to/output

Author: DeepPrep Team
"""

import os
import json
import argparse
import glob
from pathlib import Path
from datetime import datetime
import base64


def load_json_file(json_path):
    """Load JSON file"""
    try:
        with open(json_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        print(f"Warning: Cannot read {json_path}: {e}")
        return None


def image_to_base64(image_path):
    """Convert image to base64 encoding"""
    try:
        with open(image_path, 'rb') as f:
            return base64.b64encode(f.read()).decode()
    except Exception as e:
        print(f"Warning: Cannot read image {image_path}: {e}")
        return None


def determine_target_type(subject_data):
    """Determine target type: cortical (surface) or subcortical (volume)"""
    # If vertex index exists, it's a cortical target
    lh_is_cortical = ('lh_Indi_Target_index' in subject_data and 
                     subject_data['lh_Indi_Target_index'] and 
                     str(subject_data['lh_Indi_Target_index']).startswith('lh'))
    rh_is_cortical = ('rh_Indi_Target_index' in subject_data and 
                     subject_data['rh_Indi_Target_index'] and 
                     str(subject_data['rh_Indi_Target_index']).startswith('rh'))
    
    return lh_is_cortical, rh_is_cortical


def check_hemisphere_presence(subject_data):
    """Check if left and right hemisphere targets exist"""
    lh_exists = (subject_data.get('lh_Indi_Target_Score') is not None and 
                subject_data.get('lh_Indi_Target_Score') != 'N/A' and
                subject_data.get('lh_Indi_Target_Score') != '')
    rh_exists = (subject_data.get('rh_Indi_Target_Score') is not None and 
                subject_data.get('rh_Indi_Target_Score') != 'N/A' and
                subject_data.get('rh_Indi_Target_Score') != '')
    
    return lh_exists, rh_exists


def generate_target_info_html(subject_data, hemisphere, is_cortical):
    """Generate single hemisphere target information HTML"""
    prefix = hemisphere.lower()
    hemi_name = "Left Hemisphere" if hemisphere == "LH" else "Right Hemisphere"
    
    try:
        score = float(subject_data.get(f'{prefix}_Indi_Target_Score', 0))
        score_str = f"{score:.4f}"
    except (ValueError, TypeError):
        score_str = 'N/A'
    
    if not is_cortical:
        # Subcortical target - only show volume information
        return f"""
        <div class="info-card">
            <h3>{hemi_name} Target Information (Subcortical)</h3>
            <table>
                <tr><td>Target Score:</td><td>{score_str}</td></tr>
                <tr><td>Volume RAS Coordinates:</td><td>{subject_data.get(f'{prefix}_Indi_Target_volRAS', 'N/A')}</td></tr>
                <tr><td>T1w Space Voxel Coordinates:</td><td>{subject_data.get(f'{prefix}_Indi_Target_Voxel_coord_T1w_space', 'N/A')}</td></tr>
                <tr><td>MNI Space Coordinates:</td><td>{subject_data.get(f'{prefix}_Indi_Target_Voxel_coord_MNI_space', 'N/A')}</td></tr>
            </table>
        </div>
        """
    else:
        # Cortical target - show surface and volume information
        return f"""
        <div class="info-card">
            <h3>{hemi_name} Target Information (Cortical)</h3>
            <table>
                <tr><td>Target Score:</td><td>{score_str}</td></tr>
                <tr><td>Vertex Index:</td><td>{subject_data.get(f'{prefix}_Indi_Target_index', 'N/A')}</td></tr>
                <tr><td>Surface RAS Coordinates:</td><td>{subject_data.get(f'{prefix}_Indi_Target_surfRAS', 'N/A')}</td></tr>
                <tr><td>Volume RAS Coordinates:</td><td>{subject_data.get(f'{prefix}_Indi_Target_volRAS', 'N/A')}</td></tr>
                <tr><td>T1w Space Voxel Coordinates:</td><td>{subject_data.get(f'{prefix}_Indi_Target_Voxel_coord_T1w_space', 'N/A')}</td></tr>
                <tr><td>MNI Space Coordinates:</td><td>{subject_data.get(f'{prefix}_Indi_Target_Voxel_coord_MNI_space', 'N/A')}</td></tr>
            </table>
        </div>
        """


def generate_subject_html(subject_data, input_dir):
    """Generate HTML content for a single subject"""
    # Determine target type and hemisphere presence
    lh_is_cortical, rh_is_cortical = determine_target_type(subject_data)
    lh_exists, rh_exists = check_hemisphere_presence(subject_data)
    
    html = f"""
    <div class="subject-section" id="{subject_data['name']}">
        <h2>Subject: {subject_data['name']}</h2>
        
        <div class="info-grid">
    """
    
    # Generate target information based on hemisphere presence
    if lh_exists:
        html += generate_target_info_html(subject_data, "LH", lh_is_cortical)
    
    if rh_exists:
        html += generate_target_info_html(subject_data, "RH", rh_is_cortical)
    
    # If neither exists, show no target information
    if not lh_exists and not rh_exists:
        html += """
        <div class="info-card">
            <h3>Target Information</h3>
            <p class="error">No valid target information found</p>
        </div>
        """
    
    html += """
        </div>
    """
    
    # Check for actual warning information
    warnings = subject_data.get('Warnings', '')
    if warnings and warnings.strip() and warnings.lower() != 'none':
        html += f"""
        <div class="warnings-section">
            <h3>Warning Information</h3>
            <p class="warnings-text">{warnings}</p>
        </div>
        """
    
    html += """
        <div class="images-section">
            <h3>Visualization Results</h3>
    """
    
    # 1. Parcellation display - show only what is used
    parcellation_images = []
    parc_fields = [
        ('Parcellation18_Figure', '18 Parcellation Display'),
        ('Parcellation213_Figure', '213 Parcellation Display')
    ]
    
    for field, title in parc_fields:
        if field in subject_data and subject_data[field]:
            image_path = os.path.join(input_dir, subject_data[field])
            if os.path.exists(image_path):
                parcellation_images.append((image_path, title))
    
    if parcellation_images:
        html += """
            <h4>1. Parcellation Display</h4>
            <div class="image-grid">
        """
        for image_path, title in parcellation_images:
            base64_img = image_to_base64(image_path)
            if base64_img:
                html += f"""
                <div class="image-item">
                    <h5>{title}</h5>
                    <img src="data:image/png;base64,{base64_img}" alt="{title}" onclick="showFullImage(this)" />
                </div>
                """
        html += "</div>"
    
    # 2. Target display - show based on target type
    target_images = []
    
    # Check for Target_Figure
    if 'Target_Figure' in subject_data and subject_data['Target_Figure']:
        target_path = os.path.join(input_dir, subject_data['Target_Figure'])
        if os.path.exists(target_path):
            # Determine display type
            bilateral = lh_exists and rh_exists
            if any([lh_is_cortical, rh_is_cortical]):
                display_type = "Surface Space" + (" (Bilateral)" if bilateral else " (Unilateral)")
            else:
                display_type = "Volume Space" + (" (Bilateral)" if bilateral else " (Unilateral)")
            
            target_images.append((target_path, f"Target Display - {display_type}"))
    
    # Check for T1 fusion images
    fusion_fields = ['Target_T1_Figure', 'Fusion_T1_Figure', 'T1_Overlay_Figure']
    for field in fusion_fields:
        if field in subject_data and subject_data[field]:
            fusion_path = os.path.join(input_dir, subject_data[field])
            if os.path.exists(fusion_path):
                target_images.append((fusion_path, "Target T1 Fusion"))
                break
    
    if target_images:
        html += """
            <h4>2. Target Display</h4>
            <div class="image-grid">
        """
        for image_path, title in target_images:
            base64_img = image_to_base64(image_path)
            if base64_img:
                html += f"""
                <div class="image-item">
                    <h5>{title}</h5>
                    <img src="data:image/png;base64,{base64_img}" alt="{title}" onclick="showFullImage(this)" />
                </div>
                """
        html += "</div>"
    
    html += """
        </div>
    </div>
    """
    
    return html


def generate_statistics(subjects_data):
    """Generate statistics"""
    valid_subjects = [s for s in subjects_data if s is not None]
    total_subjects = len(valid_subjects)
    
    lh_scores = []
    rh_scores = []
    for s in valid_subjects:
        try:
            lh_score = s.get('lh_Indi_Target_Score')
            if lh_score is not None and lh_score != 'N/A':
                lh_scores.append(float(lh_score))
        except (ValueError, TypeError):
            pass
        try:
            rh_score = s.get('rh_Indi_Target_Score')
            if rh_score is not None and rh_score != 'N/A':
                rh_scores.append(float(rh_score))
        except (ValueError, TypeError):
            pass
    
    avg_lh_score = sum(lh_scores) / len(lh_scores) if lh_scores else 0
    avg_rh_score = sum(rh_scores) / len(rh_scores) if rh_scores else 0
    warnings_count = len([s for s in valid_subjects if s.get('Warnings') and s.get('Warnings').strip() and s.get('Warnings').lower() != 'none'])
    
    return {
        'total_subjects': total_subjects,
        'avg_lh_score': f"{avg_lh_score:.3f}",
        'avg_rh_score': f"{avg_rh_score:.3f}",
        'warnings_count': warnings_count
    }


def generate_toc_html(subjects_data):
    """Generate table of contents HTML"""
    toc_html = "<ul>"
    for subject_data in subjects_data:
        if subject_data:
            name = subject_data.get('name', 'Unknown')
            toc_html += f'<li><a href="#{name}">{name}</a></li>'
    toc_html += "</ul>"
    return toc_html


def load_template(template_path):
    """Load HTML template file"""
    try:
        with open(template_path, 'r', encoding='utf-8') as f:
            return f.read()
    except Exception as e:
        print(f"Error: Cannot load template file {template_path}: {e}")
        return None


def generate_qc_html(subjects_data, output_path, input_dir, template_path):
    """Generate complete QC HTML report"""
    
    # Load HTML template
    template_content = load_template(template_path)
    if template_content is None:
        return False
    
    # Generate content sections
    stats = generate_statistics(subjects_data)
    toc_html = generate_toc_html(subjects_data)
    
    # Generate HTML content for all subjects
    subjects_html = ""
    for subject_data in subjects_data:
        if subject_data:
            subjects_html += generate_subject_html(subject_data, input_dir)
    
    # Prepare template replacement data
    template_data = {
        'generation_time': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
        'total_subjects': stats['total_subjects'],
        'avg_lh_score': stats['avg_lh_score'],
        'avg_rh_score': stats['avg_rh_score'],
        'warnings_count': stats['warnings_count'],
        'toc_html': toc_html,
        'subjects_html': subjects_html
    }
    
    # Replace placeholders in template
    final_html = template_content
    for key, value in template_data.items():
        final_html = final_html.replace(f'{{{{{key}}}}}', str(value))
    
    # Write to file
    try:
        with open(output_path, 'w', encoding='utf-8') as f:
            f.write(final_html)
        print(f"QC report generated: {output_path}")
        return True
    except Exception as e:
        print(f"Error: Cannot write file {output_path}: {e}")
        return False


def main():
    parser = argparse.ArgumentParser(description='Generate Target QC HTML Report')
    parser.add_argument('--input_dir', required=True, 
                        help='Input directory path containing target results')
    parser.add_argument('--output_dir', required=True,
                        help='Output directory path')
    parser.add_argument('--output_name', default='target_qc_report.html',
                        help='Output HTML filename (default: target_qc_report.html)')
    parser.add_argument('--template', default=None,
                        help='HTML template file path (default: template.html in script directory)')
    
    args = parser.parse_args()
    
    input_dir = Path(args.input_dir)
    output_dir = Path(args.output_dir)
    
    # Determine template file path
    if args.template:
        template_path = Path(args.template)
    else:
        # Default to template.html in script directory
        script_dir = Path(__file__).parent
        template_path = script_dir / 'template.html'
    
    # Check if template file exists
    if not template_path.exists():
        print(f"Error: Template file does not exist: {template_path}")
        return
    
    # Check if input directory exists
    if not input_dir.exists():
        print(f"Error: Input directory does not exist: {input_dir}")
        return
    
    # Create output directory
    output_dir.mkdir(parents=True, exist_ok=True)
    
    # Find all subject directories
    subject_dirs = glob.glob(str(input_dir / "sub-*"))
    subject_dirs.sort()
    
    if not subject_dirs:
        print(f"Warning: No sub-* directories found in {input_dir}")
        return
    
    print(f"Found {len(subject_dirs)} subject directories")
    print(f"Using template file: {template_path}")
    
    # Read JSON file for each subject
    subjects_data = []
    for subject_dir in subject_dirs:
        json_file = os.path.join(subject_dir, "TARGET_targets_auto.json")
        if os.path.exists(json_file):
            subject_data = load_json_file(json_file)
            subjects_data.append(subject_data)
            if subject_data:
                print(f"Loaded: {subject_data.get('name', os.path.basename(subject_dir))}")
        else:
            print(f"Warning: JSON file not found: {json_file}")
            subjects_data.append(None)
    
    if not any(subjects_data):
        print("Error: No valid TARGET_targets_auto.json files found")
        return
    
    # Generate HTML report
    output_path = output_dir / args.output_name
    success = generate_qc_html(subjects_data, str(output_path), str(input_dir), str(template_path))
    
    if success:
        print(f"\nReport generation completed!")
        print(f"- Total subjects: {len([s for s in subjects_data if s is not None])}")
        print(f"- Output file: {output_path}")
        print(f"- Template used: {template_path}")


if __name__ == "__main__":
    main() 